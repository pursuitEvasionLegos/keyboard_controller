#!/usr/bin/python
# import roslib; roslib.load_manifest('teleop_twist_keyboard')
import rospy
import rosnode

import re
import argparse
ap = argparse.ArgumentParser()
ap.add_argument("--pattern","-p",default="/robot",type=str)
args = vars(ap.parse_args())

nodeFilter = re.compile(args.get("pattern"))

from geometry_msgs.msg import Twist

import sys, select, termios, tty

msg = """\n
---------------------------
Moving around:
   u    i    o
   j    k    l
   m    ,    .

q/z : increase/decrease max speeds by 10%
w/x : increase/decrease only linear speed by 10%
e/c : increase/decrease only angular speed by 10%
r   : list robots to control
anything else : stop

CTRL-C to quit
"""

moveBindings = {
		'i':(1,0),
		'o':(1,-1),
		'j':(0,1),
		'l':(0,-1),
		'u':(1,1),
		',':(-1,0),
		'.':(-1,1),
		'm':(-1,-1),
	       }

speedBindings={
		'q':(1.1,1.1),
		'z':(.9,.9),
		'w':(1.1,1),
		'x':(.9,1),
		'e':(1,1.1),
		'c':(1,.9),
	      }

def getKey():
    tty.setraw(sys.stdin.fileno())
    select.select([sys.stdin], [], [], 0)
    key = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

speed = .5
turn = 1

def vels(speed,turn):
    return "currently:\tspeed %s\tturn %s " % (speed,turn)

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    topic = "cmd_vel"
    pub = rospy.Publisher("cmd_vel", Twist,queue_size=10)
    rospy.init_node("keyboard_controller")
    x = 0
    th = 0
    status = 0
    try:
        print msg
        print vels(speed,turn)
        while(1):
            key = getKey()
            if key in moveBindings.keys():
                x = moveBindings[key][0]
                th = moveBindings[key][1]
            elif key in speedBindings.keys():
                speed = speed * speedBindings[key][0]
                turn = turn * speedBindings[key][1]
                print vels(speed,turn)
                if (status == 14):
                    print msg
                status = (status + 1) % 15
            elif key == 'r':
                allNodes = rosnode.get_node_names()
                robotNodes = [robot for robot in allNodes
                              if nodeFilter.search(robot)]
                if robotNodes:
                    robotInds = ['0']
                    print "------------------"
                    print "% 3d: 'Generic'" % (0,)
                    for i,rN in enumerate(robotNodes):
                        robotInds.append(str(i+1))
                        print "% 3d: %s" % (i+1,rN)
                    print "------------------"
                    print "Please select a node..."
                    key = getKey()
                    if key in robotInds:
                        if key == '0':
                            pass
                        else:
                            ## stop current robot
                            twist = Twist()
                            twist.linear.x = 0
                            twist.linear.y = 0
                            twist.linear.z = 0
                            twist.angular.x = 0
                            twist.angular.y = 0
                            twist.angular.z = 0
                            pub.publish(twist)

                            ## start publishing to new robot
                            robotNode = robotNodes[int(key)-1]
                            topic = "cmd_vel_"+re.sub("^/","",
                                                      robotNode)
                            pub = rospy.Publisher(topic,Twist,queue_size=10)
                        print "Selected %s" % (key,)
                        print "Publishing to %s" % (topic,)
                    else:
                        print "Invalid index"
                else:
                    print "------------------"
                    print "No nodes matching pattern"
                    print "------------------"
            else:
                x = 0
                th = 0

                if (key == '\x03'):
                    break

            twist = Twist()
            twist.linear.x = x*speed
            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = th*turn
            pub.publish(twist)
    except:
        pass
    finally:
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        pub.publish(twist)
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
